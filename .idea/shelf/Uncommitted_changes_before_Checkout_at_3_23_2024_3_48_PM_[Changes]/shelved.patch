Index: src/checkinSys/Logger.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package checkInSys;\r\n\r\nimport java.io.FileWriter;\r\nimport java.io.IOException;\r\nimport java.time.LocalDateTime;\r\n\r\npublic class Logger {\r\n\t\r\n    private static final String LOG_FILE = \"simulation.log\";\r\n\r\n    public static void log(String message) {\r\n        String logEntry = LocalDateTime.now() + \": \" + message;\r\n        try (FileWriter writer = new FileWriter(LOG_FILE, true)) {\r\n            writer.write(logEntry + \"\\n\");\r\n        } catch (IOException e) {\r\n            e.printStackTrace();\r\n        }\r\n    }\r\n\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/checkinSys/Logger.java b/src/checkinSys/Logger.java
--- a/src/checkinSys/Logger.java	(revision 8d41d6c6ea3bc7bd801a26c163070b4dddb36528)
+++ b/src/checkinSys/Logger.java	(date 1711207730219)
@@ -1,4 +1,4 @@
-package checkInSys;
+package checkinSys;
 
 import java.io.FileWriter;
 import java.io.IOException;
Index: .gitignore
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.gitignore b/.gitignore
new file mode 100644
--- /dev/null	(date 1711207490623)
+++ b/.gitignore	(date 1711207490623)
@@ -0,0 +1,1 @@
+/bin/
Index: src/checkinSys/PassengerQueue.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package checkInSys;\r\n\r\nimport java.util.List;\r\n\r\npublic class PassengerQueue implements Runnable {\r\n\t\r\n\tprivate final String queueType;\r\n    private final List<Passenger> queue;\r\n    private final List<Passenger> list;\r\n    private boolean isOpen;\r\n    \r\n\tpublic PassengerQueue(String queueType, List<Passenger> queue, List<Passenger> list) {\r\n\t\tthis.queueType = queueType;\r\n\t\tthis.queue = queue;\r\n\t\tthis.list = list;\r\n\t\tthis.isOpen = true;\r\n\t}\r\n\t\r\n\tpublic void closeQueue() {\r\n        isOpen = false;\r\n    }\r\n\t\r\n\t@Override\r\n    public void run() {\r\n        while (isOpen) {\r\n            if (!list.isEmpty()) {\r\n                Passenger nextPassenger = list.remove(0);\r\n                queue.add(nextPassenger);\r\n                Logger.log(queueType + \" adding passenger: \" + nextPassenger.getName());\r\n                // Simulate processing time\r\n                try {\r\n                    Thread.sleep(1000); // Simulate processing time\r\n                } catch (InterruptedException e) {\r\n                    e.printStackTrace();\r\n                }\r\n                Logger.log(queueType + \" finished adding passenger: \" + nextPassenger.getName());\r\n            }\r\n        }\r\n    }\r\n\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/checkinSys/PassengerQueue.java b/src/checkinSys/PassengerQueue.java
--- a/src/checkinSys/PassengerQueue.java	(revision 8d41d6c6ea3bc7bd801a26c163070b4dddb36528)
+++ b/src/checkinSys/PassengerQueue.java	(date 1711207879491)
@@ -1,4 +1,4 @@
-package checkInSys;
+package checkinSys;
 
 import java.util.List;
 
Index: src/checkinSys/SharedObject.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import java.io.BufferedReader;\r\nimport java.io.FileReader;\r\nimport java.io.IOException;\r\nimport java.util.HashMap;\r\n\r\nimport myExceptions.InvalidAttributeException;\r\nimport myExceptions.InvalidBookRefException;\r\n\r\npublic class SharedObject {\r\n\t// Maps to store flights and passengers data\r\n\tprivate HashMap<String, Flight> flights = new HashMap<String, Flight>(); // flight code -> flight object\r\n\tprivate HashMap<String, Passenger> passengers = new HashMap<String, Passenger>(); // name -> passenger object\r\n\tprivate FlightList flightList = new FlightList();\r\n\r\n\t/**\r\n\t * Constructor for Manager. Initializes the class and reads data from files.\r\n\t */\r\n\tpublic SharedObject() {\r\n\t    try {\r\n\t        readFromFile(\"src/data/flight_details_data.csv\", \r\n\t                     \"src/data/passenger_data.csv\");\r\n\t    } catch (InvalidAttributeException | IOException | InvalidBookRefException e) {\r\n\t        e.printStackTrace();// Print the stack trace in case of an exception\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Reads flight and passenger data from files and populates data structures.\r\n\t *\r\n\t * @param file_flights    Path to the flight data file.\r\n\t * @param file_passengers Path to the passenger data file.\r\n\t * @throws IOException                   If there is an error in file handling.\r\n\t * @throws InvalidAttributeException     If there is invalid flight data.\r\n\t * @throws InvalidBookRefException       If there is invalid booking reference data.\r\n\t */\r\n\tpublic void readFromFile(String file_flights, String file_passengers) throws IOException, InvalidAttributeException, InvalidBookRefException {\r\n\t\ttry (BufferedReader brFlights = new BufferedReader(new FileReader(file_flights))) {\r\n\t\t    System.out.println(\"Reading Flights Information\"); \r\n\t\t    String line= brFlights.readLine();\r\n\t\t    line= brFlights.readLine();\r\n\t\t    while (line != null) {\r\n\t\t        try {\r\n\t\t            validateFlightData(line);\r\n//\t\t            System.out.println(\"Valid Flight data\");\r\n\t\t        } catch (InvalidAttributeException e) {\r\n\t\t            System.out.println(\"Invalid Flight data: \" + e.getMessage());\r\n\t\t            line = brFlights.readLine();\r\n\t\t            continue; // Skip this line and proceed with the next one\r\n\t\t        }\r\n\t\t\r\n\t\t        String[] flightData = line.split(\",\");\r\n\t\t        String flight_code = flightData[0];\r\n\t\t        String date = flightData[1];\r\n\t\t        String destination = flightData[2];\r\n\t\t        String carrier = flightData[3];\r\n\t\t        int capacity = Integer.parseInt(flightData[4]);\r\n\t\t        double weight = Double.parseDouble(flightData[5]);\r\n\t\t        double volume = Double.parseDouble(flightData[6]);\r\n\t\t        Flight flight = new Flight(flight_code, date, destination, carrier, capacity, weight, volume);\r\n\t\t        flightList.addFlight(flight);\r\n\t\t        flights.put(flight_code, flight);\r\n\t\t        line = brFlights.readLine();\r\n\t\t    }\r\n\t\t    \r\n\t\t}\r\n\r\n\t    try (BufferedReader brPassengers = new BufferedReader(new FileReader(file_passengers))) {\r\n\t        String line = brPassengers.readLine();\r\n\t        System.out.println(\"Reading Passenger Information\");\r\n\t        while ((line = brPassengers.readLine()) != null) {\r\n\t            try {\r\n\t                validatePassengerData(line);\r\n\t            } catch (InvalidBookRefException |InvalidAttributeException e) {\r\n\t                System.out.println(\"Invalid Passenger data: \" + e.getMessage());\r\n\t                continue; // Skip this line and proceed with the next one\r\n\t            }\r\n\t        }\r\n\t        \r\n\t    }\r\n\t    \r\n\t}\r\n\r\n\t/**\r\n\t * Look up a passenger by last name and reference code.\r\n\t * \r\n\t * @param last_name Passenger's last name\r\n\t * @param br        Passenger's reference code\r\n\t * @return The passenger object, null if none.\r\n\t */\r\n\tpublic Passenger findPassenger(String last_name, String br) {\r\n\t\tif(br.length() < 8) return null;\r\n\t\tString flight_code = br.substring(3, 8);\r\n\t\tFlight flight = findFlight(flight_code);\r\n\t\tint idx = flight.getList().findByLastName(last_name, br);\r\n\t\tif (idx != -1)\r\n\t\t\treturn flight.getList().getByIdx(idx);\r\n\t\treturn null;\r\n\t}\r\n\r\n\t/**\r\n\t * Calculate the excess baggage fee that needs to be paid.\r\n\t * \r\n\t * @param last_name Passenger's last name\r\n\t * @param br        Passenger's reference code\r\n\t * @param weight    Baggage weight\r\n\t * @param volume    Baggage volume\r\n\t * @return The excess baggage fee\r\n\t */\r\n\tpublic double excess_fee(String last_name, String br, double weight, double volume) {\r\n\t\tPassenger p = findPassenger(last_name, br);\r\n\t\tp.set(weight, volume);\r\n\t\treturn p.excess_fee();\r\n\t}\r\n\r\n\t/**\r\n\t * Check that the booking reference code is correct according to our rules.\r\n\t * \r\n\t * @param name Passenger's name\r\n\t * @return true if correct, false otherwise.\r\n\t */\r\n\tpublic boolean check_rc(String name) {\r\n\t\tPassenger p = findPassenger(name);\r\n\t\tString rc = p.getReference();\r\n\t\tString fc = p.getFlight();\r\n\t\tFlight f = flights.get(fc);\r\n\t\tString des = f.getDestination();\r\n\t\tString tmp1 = des + fc;\r\n\t\tString tmp2 = rc.substring(0, 8);\r\n\t\tif (tmp1.equals(tmp2))\r\n\t\t\treturn true;\r\n\t\telse\r\n\t\t\treturn false;\r\n\t}\r\n\r\n\t/**\r\n\t * Help passengers check in.\r\n\t * \r\n\t * @param last_name Passenger's last name\r\n\t * @param br        Passenger's reference code\r\n\t * @return true if checked-in, false otherwise.\r\n\t */\r\n\tpublic synchronized boolean check_in(String last_name, String br) {\r\n\t\tPassenger p = findPassenger(last_name, br);\r\n\t\treturn p.check_in();\r\n\t}\r\n\t\r\n\t/**\r\n\t * Look up a flight in the HashMap.\r\n\t * \r\n\t * @param flight_code The flight code.\r\n\t * @return The flight object.\r\n\t */\r\n\tpublic Flight findFlight(String flight_code) {\r\n\t\treturn flights.get(flight_code);\r\n\t}\r\n\r\n\t/**\r\n\t * Look up a passenger in the HashMap.\r\n\t * \r\n\t * @param name The passenger's name.\r\n\t * @return The passenger object.\r\n\t */\r\n\tpublic Passenger findPassenger(String name) {\r\n\t\treturn passengers.get(name);\r\n\t}\r\n\r\n\t/**\r\n\t * @return A hash table of flight information.\r\n\t */\r\n\tpublic HashMap<String, Flight> getFlights() {\r\n\t\treturn flights;\r\n\t}\r\n\r\n\t/**\r\n\t * @return A hash table of passenger information.\r\n\t */\r\n\tpublic HashMap<String, Passenger> getPassengers() {\r\n\t\treturn passengers;\r\n\t}\r\n\r\n\t/**\r\n\t * @return A list of flights.\r\n\t */\r\n\tpublic FlightList getFlightList() {\r\n\t\treturn flightList;\r\n\t}\r\n\r\n\t/**\r\n\t * validate Flight Data legal or not\r\n\t * \r\n\t * @param line The reading-line of flight data (excepted length 7)\r\n\t * @exception InvalidAttributeException Invalid input attribute\r\n\t */\r\n\tpublic void validateFlightData(String line) throws InvalidAttributeException {\r\n\t\t// ====== For Flight information ======\r\n\t\t// \"Flight Code\", \"Date\", \"Destination Airport\", \"Carrier\", \"Passengers\", \"Total Baggage Weight (kg)\", \"Total Baggage Volume (m^3)\"\r\n\t\tString[] fields = line.split(\",\");\r\n\t\tif (fields.length != 7) {\r\n\t\t\tthrow new InvalidAttributeException(\"Invalid number of Flight data\");\r\n\t\t}\r\n\r\n\t\tString flight_code = fields[0];\r\n\t\tString date = fields[1];\r\n\t\tString destination = fields[2];\r\n\t\tString carrier = fields[3];\r\n\t\tString capacity = fields[4];\r\n\t\tString weight = fields[5];\r\n\t\tString volume = fields[6];\r\n\t\t// for flight_code\r\n\t\tif (flight_code.isEmpty()) throw new InvalidAttributeException(\"Flight code cannot be empty\");\r\n\t\t// for date\r\n\t\tif (date.isEmpty()) throw new InvalidAttributeException(\"Flight date cannot be empty\");\r\n\t\t// for destination\r\n\t\tif (destination.isEmpty()) throw new InvalidAttributeException(\"Destination cannot be empty\");\r\n\t\t// for carrier\r\n\t\tif (carrier.isEmpty()) throw new InvalidAttributeException(\"Carrier cannot be empty\");\r\n\t\t// for capacity\r\n\t\ttry {\r\n\t\t\tint capacity_ = Integer.parseInt(capacity);\r\n\t\t\tif (capacity_ < 0) throw new InvalidAttributeException(\"Capacity must be a non-negative integer\");\r\n\t\t} catch (NumberFormatException e) {\r\n\t\t\tthrow new InvalidAttributeException(\"Capacity must be a valid integer\");\r\n\t\t}\r\n\t\t// for weight\r\n\t\ttry {\r\n\t\t\tdouble weight_ = Double.parseDouble(weight);\r\n\t\t\tif (weight_ < 0) throw new InvalidAttributeException(\"Weight must be a non-negative Double\");\r\n\t\t} catch (NumberFormatException e) {\r\n\t\t\tthrow new InvalidAttributeException(\"Weight must be a valid Double\");\r\n\t\t}\r\n\t\t// for volume\r\n\t\ttry {\r\n\t\t\tdouble volume_ = Double.parseDouble(volume);\r\n\t\t\tif (volume_ < 0) throw new InvalidAttributeException(\"Volume must be a non-negative double\");\r\n\t\t} catch (NumberFormatException e) {\r\n\t\t\tthrow new InvalidAttributeException(\"Volume must be a valid double\");\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * validate Passenger Data legal or not\r\n\t * \r\n\t * @param fields The reading-line of flight data (excepted length 7)\r\n\t * @exception InvalidAttributeException Invalid input attribute\r\n\t * @exception InvalidBookRefException Invalid booking reference\r\n\t */\r\n\tpublic void validatePassengerData(String line) throws InvalidAttributeException, InvalidBookRefException {\r\n\t\t// ====== For Passenger information ======\r\n\t\t// \"Booking Code\", \"Name\", \"Flight Code\", \"Date\", \"Checked In\", \"Baggage Weight (kg)\", \"Baggage Volume (m^3)\"\r\n\t\tString[] fields = line.split(\",\");\r\n\t\tif (fields.length != 7) {\r\n\t\t\tthrow new InvalidAttributeException(\"Invalid number of Passenger data\");\r\n\t\t}\r\n\r\n\t\tString reference_code = fields[0];\r\n\t\tString name = fields[1];\r\n\t\tString flight_code = fields[2];\r\n\t\tString date = fields[3];\r\n\t\tString check_in = fields[4];\r\n\t\tString weight = fields[5];\r\n\t\tString volume = fields[6];\r\n\t\t\r\n\t\t// for reference_code\r\n\t\tif (reference_code.isEmpty()) throw new InvalidAttributeException(\"Reference code cannot be empty\");\r\n\t\t\r\n\t\t// for name\r\n\t\tif (name.isEmpty()) throw new InvalidAttributeException(\"Name cannot be empty\");\r\n\t\t// for flight_code\r\n\t\tif (flight_code.isEmpty()) throw new InvalidAttributeException(\"Flight code cannot be empty\");\r\n\t\t// for flight_code\r\n\t\tif (date.isEmpty()) throw new InvalidAttributeException(\"date cannot be empty\");\r\n\t\t// for check_in\r\n\t\tif (check_in.isEmpty()) throw new InvalidAttributeException(\"Check-in cannot be empty\");\r\n\r\n\t\t// for weight\r\n\t\ttry {\r\n\t\t\tdouble weight_ = Double.parseDouble(weight);\r\n\t\t\tif (weight_ < 0) throw new InvalidAttributeException(\"Weight must be a non-negative Double\");\r\n\t\t} catch (NumberFormatException e) {\r\n\t\t\tthrow new InvalidAttributeException(\"Weight must be a valid Double\");\r\n\t\t}\r\n\t\t// for volume\r\n\t\ttry {\r\n\t\t\tdouble volume_ = Double.parseDouble(volume);\r\n\t\t\tif (volume_ < 0) throw new InvalidAttributeException(\"Volume must be a non-negative Double\");\r\n\t\t} catch (NumberFormatException e) {\r\n\t\t\tthrow new InvalidAttributeException(\"Volume must be a valid Double\");\r\n\t\t}\r\n\t\tPassenger p = new Passenger(reference_code, name, flight_code, date, check_in, Double.parseDouble(weight), Double.parseDouble(volume));\r\n        passengers.put(name, p);\r\n        // reference code legal check\r\n        if (!check_rc(name)) {\r\n\t\t\tpassengers.remove(name, p);\r\n\t\t\tthrow new InvalidBookRefException(\"Reference code doesn't match, it's illegal!\");\r\n\t\t} else {\r\n\t\t\tFlight objFlight = findFlight(flight_code);\r\n            objFlight.getList().addPassenger(p);\r\n\t\t}\r\n\r\n\t}\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/checkinSys/SharedObject.java b/src/checkinSys/SharedObject.java
--- a/src/checkinSys/SharedObject.java	(revision 8d41d6c6ea3bc7bd801a26c163070b4dddb36528)
+++ b/src/checkinSys/SharedObject.java	(date 1711207886602)
@@ -1,3 +1,5 @@
+package checkinSys;
+
 import java.io.BufferedReader;
 import java.io.FileReader;
 import java.io.IOException;
Index: src/checkinSys/AirportSimulation.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package checkInSys;\r\n\r\nimport java.util.ArrayList;\r\nimport java.util.List;\r\nimport java.util.Map;\r\nimport java.util.Random;\r\nimport java.util.HashMap;\r\n\r\npublic class AirportSimulation {\r\n\tpublic static void main(String[] args) {\r\n\t\tList<Thread> checkInThreads = new ArrayList<>();\r\n\t\tList<Passenger> passengerQueue = new ArrayList<>();\r\n\t\tList<Passenger> passengerNotCheckIn = new ArrayList<>();\r\n\t\tint queueNum = 1;\r\n\t\tint checkInDeskNum = 3;\r\n\t\tManager manager = new Manager();\r\n\t\tfor (Map.Entry<String, Passenger> entry : manager.getPassengers().entrySet()) {\r\n\t\t\tPassenger p = entry.getValue();\r\n\t\t\tif (p.getCheckin().equals(\"No\")) {\r\n\t\t\t\tpassengerNotCheckIn.add(p);\r\n\t\t\t}\r\n\t\t}\r\n\t   \r\n\t\t\r\n\t\t\r\n\t\t\r\n\t\t// Create passenger queue\r\n\t\tfor (int i = 1; i <= queueNum; i++) {\r\n\t\t\tPassengerQueue queue = new PassengerQueue(\"economy\", passengerQueue, passengerNotCheckIn);\r\n\t\t\tThread thread = new Thread(queue);\r\n\t\t\tcheckInThreads.add(thread);\r\n\t        thread.start();\r\n\t\t}\r\n\t\t\r\n\r\n        // Create check-in desks\r\n        \r\n        for (int i = 1; i <= checkInDeskNum; i++) {\r\n            CheckInDesk desk = new CheckInDesk(\"Desk\" + i, passengerQueue);\r\n            Thread thread = new Thread(desk);\r\n            checkInThreads.add(thread);\r\n            thread.start();\r\n        }\r\n\r\n        // Wait for all check-in desks to finish processing\r\n        for (Thread thread : checkInThreads) {\r\n            try {\r\n                thread.join();\r\n            } catch (InterruptedException e) {\r\n                e.printStackTrace();\r\n            }\r\n        }\r\n\r\n        Logger.log(\"All passengers have been processed.\");\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/checkinSys/AirportSimulation.java b/src/checkinSys/AirportSimulation.java
--- a/src/checkinSys/AirportSimulation.java	(revision 8d41d6c6ea3bc7bd801a26c163070b4dddb36528)
+++ b/src/checkinSys/AirportSimulation.java	(date 1711207712668)
@@ -1,4 +1,4 @@
-package checkInSys;
+package checkinSys;
 
 import java.util.ArrayList;
 import java.util.List;
Index: src/GUI/GUI_Stage2.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import javax.swing.*;\r\nimport java.awt.*;\r\nimport java.awt.event.ActionEvent;\r\nimport java.awt.event.ActionListener;\r\nimport java.util.HashMap;\r\nimport java.util.Hashtable;\r\nimport java.util.Map;\r\nimport java.util.Random;\r\n\r\npublic class AirportGUI extends JFrame {\r\n    private JPanel queuePanel;\r\n    private JPanel deskPanel;\r\n    private JPanel flightPanel;\r\n    private JSlider speedSlider;\r\n\r\n    private Random timeSetter = new Random();\r\n    private final int deskWidth = 150; // 设置柜台窗口固定宽度\r\n    private final int deskHeight = 150; // 设置柜台窗口固定高度\r\n    private final int queueCount1 = 11; // 假定Queue1中有11人\r\n    private final int queueCount2 = 8;  // 假定Queue2中有8人\r\n    private final int queuePanelHeight = 200; // 设置队列面板固定高度\r\n\r\n    private int timerSpeed = 1000; // 初始速度设置为1000毫秒，即1秒\r\n\r\n    // 存储每个航班计时器的引用，以便可以根据滑动条的变化调整计时器速度\r\n    private Map<Integer, Timer> flightTimers = new HashMap<>();\r\n    public AirportGUI() {\r\n        setTitle(\"Airport Check-in System\");\r\n        setDefaultCloseOperation(EXIT_ON_CLOSE);\r\n        setLayout(new BorderLayout(10, 10)); // 设置布局管理器间隔\r\n\r\n        queuePanel = createQueuePanel(); // 创建队列显示区\r\n        deskPanel = createDeskPanel();   // 创建柜台操作区\r\n        flightPanel = createFlightPanel(); // 创建航班信息区\r\n        speedSlider = createSpeedSlider();\r\n\r\n        JPanel bottomPanel = new JPanel(new BorderLayout());\r\n        bottomPanel.add(flightPanel, BorderLayout.CENTER);\r\n        bottomPanel.add(speedSlider, BorderLayout.SOUTH);\r\n\r\n        add(queuePanel, BorderLayout.NORTH);\r\n        add(deskPanel, BorderLayout.CENTER);\r\n        add(bottomPanel, BorderLayout.SOUTH);\r\n\r\n        pack(); // 调整窗口以适应组件大小\r\n        setVisible(true);\r\n    }\r\n\r\n    private JPanel createQueuePanel() {\r\n        JPanel panel = new JPanel(new GridLayout(1, 2, 10, 10));\r\n        panel.setPreferredSize(new Dimension(getWidth(), queuePanelHeight)); // 设置固定高度\r\n        panel.setBorder(BorderFactory.createLineBorder(Color.BLACK));\r\n\r\n        JTextArea queue1Text = new JTextArea(\"There are currently \"+ queueCount1 +\" people in queue1\");\r\n        queue1Text.setEditable(false);\r\n        JScrollPane queue1Scroll = new JScrollPane(queue1Text);\r\n        panel.add(queue1Scroll);\r\n\r\n        JTextArea queue2Text = new JTextArea(\"There are currently \"+ queueCount2 +\" people in queue2\");\r\n        queue2Text.setEditable(false);\r\n        JScrollPane queue2Scroll = new JScrollPane(queue2Text);\r\n        panel.add(queue2Scroll);\r\n\r\n        return panel;\r\n    }\r\n\r\n    private JPanel createDeskPanel() {\r\n        JPanel panel = new JPanel(new GridLayout(1, 5, 10, 10));\r\n        panel.setBorder(BorderFactory.createEmptyBorder(10, 10, 10, 10)); // 添加边距\r\n\r\n        for (int i = 1; i <= 5; i++) {\r\n            final int deskNumber = i; // 使用final变量以便在匿名类中使用\r\n            JPanel desk = new JPanel();\r\n            desk.setPreferredSize(new Dimension(deskWidth, deskHeight)); // 设置柜台固定大小\r\n            desk.setBorder(BorderFactory.createLineBorder(Color.BLACK)); // 初始边框设置为绿色\r\n            JCheckBox checkBox = new JCheckBox(\"Desk \" + deskNumber + \" Close\");\r\n            checkBox.addActionListener(new ActionListener() {\r\n                @Override\r\n                public void actionPerformed(ActionEvent e) {\r\n                    JCheckBox cb = (JCheckBox) e.getSource();\r\n                    if (cb.isSelected()) {\r\n                        desk.setBorder(BorderFactory.createLineBorder(Color.GREEN)); // 勾选时边框变绿\r\n                        cb.setText(\"Desk \" + deskNumber + \" Open\"); // 更新复选框文本为Open\r\n                    } else {\r\n                        desk.setBorder(BorderFactory.createLineBorder(Color.BLACK)); // 未勾选时边框变回黑色\r\n                        cb.setText(\"Desk \" + deskNumber + \" Close\"); // 更新复选框文本为初始状态\r\n                    }\r\n                }\r\n            });\r\n\r\n            desk.add(checkBox);\r\n            panel.add(desk);\r\n        }\r\n\r\n        return panel;\r\n    }\r\n\r\n\r\n    private JPanel createFlightPanel() {\r\n        JPanel panel = new JPanel(new GridLayout(2, 3, 10, 10));\r\n        panel.setBorder(BorderFactory.createEmptyBorder(10, 10, 10, 10));\r\n        panel.setPreferredSize(new Dimension(getWidth(), queuePanelHeight)); // 假设已经定义了queuePanelHeight\r\n\r\n        for (int i = 1; i <= 6; i++) {\r\n            final int flightNumber = i;\r\n            JPanel flightPanel = new JPanel(new BorderLayout());\r\n            flightPanel.setBorder(BorderFactory.createLineBorder(Color.BLACK));\r\n\r\n            JLabel countdownLabel = new JLabel(\"\", SwingConstants.CENTER);\r\n            flightPanel.add(countdownLabel, BorderLayout.CENTER);\r\n\r\n            // 设置倒计时时间为1分钟\r\n            final int[] timeLeft = {60 + timeSetter.nextInt(200)}; // 以秒为单位\r\n\r\n            Timer timer = new Timer(1000, new ActionListener() { // 计时器每秒触发一次\r\n                public void actionPerformed(ActionEvent e) {\r\n                    timeLeft[0]--;\r\n                    countdownLabel.setText(\"Flight \" + flightNumber + \" - \" + timeLeft[0]/60 + \"M\" + timeLeft[0]%60 + \"S\");\r\n\r\n                    if (timeLeft[0] <= 0) {\r\n                        flightPanel.setBorder(BorderFactory.createLineBorder(Color.RED)); // 边框变红\r\n                        countdownLabel.setText(\"Flight \" + flightNumber + \" Closed\"); // 文本更新为Closed\r\n                        ((Timer)e.getSource()).stop(); // 停止计时器\r\n                    }\r\n                }\r\n            });\r\n            timer.start(); // 启动计时器\r\n            flightTimers.put(flightNumber, timer); // Store the timer reference\r\n\r\n            panel.add(flightPanel);\r\n        }\r\n\r\n        return panel;\r\n    }\r\n\r\n    private JSlider createSpeedSlider() {\r\n        JSlider speedSlider = new JSlider(JSlider.HORIZONTAL, 250, 4000, timerSpeed);\r\n        speedSlider.setMajorTickSpacing(500);\r\n        speedSlider.setMinorTickSpacing(250);\r\n        speedSlider.setPaintTicks(true);\r\n        speedSlider.setPaintLabels(true);\r\n\r\n        Hashtable<Integer, JLabel> labelTable = new Hashtable<>();\r\n        labelTable.put(250, new JLabel(\"X0.25\"));\r\n        labelTable.put(500, new JLabel(\"X0.5\"));\r\n        labelTable.put(1000, new JLabel(\"X1\"));\r\n        labelTable.put(2000, new JLabel(\"X2\"));\r\n        labelTable.put(3000, new JLabel(\"X3\"));\r\n        labelTable.put(4000, new JLabel(\"X4\"));\r\n        speedSlider.setLabelTable(labelTable); // 设置滑动条的标签\r\n        speedSlider.addChangeListener(e -> {\r\n            JSlider source = (JSlider)e.getSource();\r\n            if (!source.getValueIsAdjusting()) {\r\n                timerSpeed = 1000000/source.getValue() ;\r\n                // Adjust all timers according to the new speed\r\n                adjustTimerSpeeds();\r\n            }\r\n        });\r\n\r\n        return speedSlider;\r\n    }\r\n\r\n    private void adjustTimerSpeeds() {\r\n        for (Map.Entry<Integer, Timer> entry : flightTimers.entrySet()) {\r\n            Timer timer = entry.getValue();\r\n            if (timer != null) {\r\n                timer.setDelay(timerSpeed);\r\n                // Note: This does not restart the timer; it only adjusts the delay for future ticks.\r\n            }\r\n        }\r\n    }\r\n\r\n    public static void main(String[] args) {\r\n        SwingUtilities.invokeLater(new Runnable() {\r\n            @Override\r\n            public void run() {\r\n                new AirportGUI();\r\n            }\r\n        });\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/GUI/GUI_Stage2.java b/src/GUI/GUI_Stage2.java
--- a/src/GUI/GUI_Stage2.java	(revision 8d41d6c6ea3bc7bd801a26c163070b4dddb36528)
+++ b/src/GUI/GUI_Stage2.java	(date 1711207965963)
@@ -1,3 +1,5 @@
+package GUI;
+
 import javax.swing.*;
 import java.awt.*;
 import java.awt.event.ActionEvent;
@@ -7,8 +9,12 @@
 import java.util.Map;
 import java.util.Random;
 
-public class AirportGUI extends JFrame {
-    private JPanel queuePanel;
+public class GUI_Stage2 extends JFrame {
+    /**
+	 * 
+	 */
+	private static final long serialVersionUID = 1L;
+	private JPanel queuePanel;
     private JPanel deskPanel;
     private JPanel flightPanel;
     private JSlider speedSlider;
@@ -24,7 +30,7 @@
 
     // 存储每个航班计时器的引用，以便可以根据滑动条的变化调整计时器速度
     private Map<Integer, Timer> flightTimers = new HashMap<>();
-    public AirportGUI() {
+    public GUI_Stage2() {
         setTitle("Airport Check-in System");
         setDefaultCloseOperation(EXIT_ON_CLOSE);
         setLayout(new BorderLayout(10, 10)); // 设置布局管理器间隔
@@ -174,7 +180,7 @@
         SwingUtilities.invokeLater(new Runnable() {
             @Override
             public void run() {
-                new AirportGUI();
+                new GUI_Stage2();
             }
         });
     }
Index: src/checkinSys/CheckInDesk.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package checkInSys;\r\n\r\nimport java.util.List;\r\n\r\npublic class CheckInDesk implements Runnable {\r\n\tprivate final String deskName;\r\n    private final List<Passenger> queue;\r\n    private boolean isOpen;\r\n\r\n    public CheckInDesk(String deskName, List<Passenger> queue) {\r\n        this.deskName = deskName;\r\n        this.queue = queue;\r\n        this.isOpen = true;\r\n    }\r\n\r\n    public void closeDesk() {\r\n        isOpen = false;\r\n    }\r\n\r\n    @Override\r\n    public void run() {\r\n        while (isOpen) {\r\n            if (!queue.isEmpty()) {\r\n                Passenger nextPassenger = queue.remove(0);\r\n                Logger.log(deskName + \" processing passenger: \" + nextPassenger.getName());\r\n                // Simulate processing time\r\n                try {\r\n                    Thread.sleep(1000); // Simulate processing time\r\n                } catch (InterruptedException e) {\r\n                    e.printStackTrace();\r\n                }\r\n                Logger.log(deskName + \" finished processing passenger: \" + nextPassenger.getName());\r\n            }\r\n        }\r\n    }\r\n\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/checkinSys/CheckInDesk.java b/src/checkinSys/CheckInDesk.java
--- a/src/checkinSys/CheckInDesk.java	(revision 8d41d6c6ea3bc7bd801a26c163070b4dddb36528)
+++ b/src/checkinSys/CheckInDesk.java	(date 1711207721114)
@@ -1,4 +1,4 @@
-package checkInSys;
+package checkinSys;
 
 import java.util.List;
 
